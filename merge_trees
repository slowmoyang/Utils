#!/usr/bin/env python
from __future__ import division
from __future__ import print_function

import ROOT
from ROOT import TFile
from ROOT import TChain

import os
import argparse
from datetime import datetime

def merge_trees(in_paths, out_path, tree_name):
    mychain = TChain(tree_name)
    for each in in_paths:
        mychain.Add(each)
    mychain.Merge(out_path)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--in_paths", nargs="+", required=True)
    parser.add_argument("--include", nargs="+")
    parser.add_argument("--exclude", nargs="+")
    parser.add_argument("-o", "--out_path", type=str)
    parser.add_argument("-t", "--tree_name")
    parser.add_argument("-s", "--safe_mode", action="store_true")
    parser.add_argument("-v", "--verbose", action="store_true")
    args = parser.parse_args()

    #########################
    # Process input path
    ###########################
    if len(args.in_paths) == 1:
        if os.path.isdir(args.in_paths[0]):
            in_dir = args.in_paths[0]
            in_paths = [os.path.join(in_dir, each) for each in os.listdir(in_dir)]
        else:
            raise ValueError
    else:
        in_paths = args.in_paths

    if args.include is not None:
        new_in_paths = []
        for each in in_paths:
            matched = False
            for pattern in args.include:
                if pattern in each:
                    matched = True
                    break
            if matched:
                new_in_paths.append(each)
        in_paths = in_paths
                
        
        for pattern in args.include:
            in_paths = [each for each in in_paths if pattern in each]
    
    if args.exclude is not None:
        for pattern in args.exclude:
            in_paths = [each for each in in_paths if not (pattern in each)]

    if args.safe_mode:
        in_paths = [each for each in in_paths if os.path.isfile(each)]
        in_paths = [each for each in in_paths if each.endswith(".root")]
        num_passed = len(in_paths)

    ############################
    # output path
    ###########################
    if args.out_path is None:
        out_name = "merged_" + datetime.now().strftime("%y%m%d-%H%M%S") + ".root"
        out_path = os.path.join(os.path.curdir, out_name)
    else:
        if args.safe_mode and (not args.out_path.endswith(".root")):
            out_path = args.out_path + ".root"
        else:
            out_path = args.out_path

    if args.verbose:
        print("From")
        for i, each in enumerate(sorted(in_paths), 1):
            print("\t {}. {}".format(i, each))
        print("To")
        print("\t {}".format(os.path.abspath(out_path)))
            

    if args.tree_name is None:
        f = ROOT.TFile.Open(in_paths[0], "READ")
        keys = list(set([each.GetName() for each in f.GetListOfKeys()]))
        if len(keys) == 1:
            if f.Get(keys[0]).ClassName() == "TTree":
                tree_name = keys[0]
            else:
                raise ValueError("No tree in ROOT File")
        else:
            if args.verbose:
                print(keys)
            raise ValueError("Please specify tree name")
    else:
        tree_name = args.tree_name

    merge_trees(in_paths, out_path, tree_name)

    if args.verbose:
        out_file = TFile.Open(out_path)
        out_tree = out_file.Get(tree_name)
        out_tree.Print()


if __name__ == "__main__":
    main() 
